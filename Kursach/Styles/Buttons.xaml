<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:local="clr-namespace:Kursach">

    <ResourceDictionary.MergedDictionaries>
        <!-- Order is important -->
        <ResourceDictionary Source="Fonts.xaml"/>
        <!--<ResourceDictionary Source="Colors.xaml"/>-->
        <ResourceDictionary Source="Converters.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Parent Hoverless button -->
    <Style TargetType="{x:Type Button}" x:Key="HoverlessButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Padding="{TemplateBinding Padding}" 
                        Background="{TemplateBinding Background}">
                        <ContentPresenter 
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Friends button -->
    <Style TargetType="{x:Type Button}" x:Key="FriendButton">
        <Setter Property="Background" Value="#313131"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    
                    <Border 
                        Padding="{TemplateBinding Padding}" 
                        Background="{TemplateBinding Background}">
                        <ContentPresenter 
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Stretch"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Cyan"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style TargetType="Button" x:Key="InviteButton">
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsMouseOver}" Value="True" >
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- System hoverless image button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource HoverlessButton}" x:Key="ImageButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Padding" Value="10"/>
    </Style>

    <!-- Banner button -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ImageButton}" x:Key="BannerButton">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Game item button style -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ImageButton}" x:Key="ItemButton">
        <Setter Property="Margin" Value="{Binding 
                                        RelativeSource={RelativeSource Mode=Self}, 
                                        Path=ActualWidth, 
                                        Converter={StaticResource viewportHeightConverter}, 
                                        ConverterParameter=20}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border 
                        Background="{TemplateBinding Background}">
                        <ContentPresenter 
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>

                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Team item button style -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ItemButton}" x:Key="TeamItemButton">
        <Setter Property="Margin" Value="{Binding 
                                        RelativeSource={RelativeSource Mode=Self}, 
                                        Path=ActualWidth, 
                                        Converter={StaticResource viewportHeightConverter}, 
                                        ConverterParameter=60}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border 
                            CornerRadius="20"
                            Background="{TemplateBinding Background}">
                            <ContentPresenter 
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>

                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom Window Control Buttons -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource HoverlessButton}" x:Key="WindowControlButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource MainForegroundGreyBrush}"/>
        <Setter Property="Padding" Value="6 2"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource MainBackgroundDarkBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource MainForegroundLightGreyBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Custom Window Closing button style -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource WindowControlButton}" x:Key="WindowCloseButton">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DangerRedColorBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource MainForegroundLightGreyBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Side menu icon button -->
    <Style TargetType="{x:Type ToggleButton}" x:Key="SideMenuButton">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource MainForegroundLightGreyBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource SmallestFontSize}"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="buttonBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True"
                            Padding="{TemplateBinding Padding}"
                            >

                        <ContentPresenter 
                                x:Name="buttonContent"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                Focusable="False"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Margin}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MainBackgroundDarkBrush}"/>
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CustomBlackBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>